
services:
  backend:
    image: find_it_back_main
    build:
      context: .
    depends_on:
      db:
        condition: service_healthy
#      kafka:
#        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/FindIt
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
#      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8080:8080"
#  kafka:
#    image: bitnami/kafka:latest
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_CFG_NODE_ID: 1
#      KAFKA_KRAFT_MODE: true
#      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
#      KAFKA_KRAFT_CLUSTER_ID: fsdfHGgUGioUG27
#      KAFKA_PROCESS_ROLES: controller,broker
#      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9092
#      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
#      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
#      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_LISTENER_PORT: 9092
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#    healthcheck:
#      test: ["CMD","kafka-topics","--bootstrap-server","localhost:9092","--list"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 20s
#    volumes:
#      - kafka_data:/var/lib/kafka/data


  db:
    image: postgres:16.0
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: FindIt
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  db-data:
#  kafka_data:





